# Labels for the Algorithm Wizard GUI
AlgorithmWizard.openJavaMenuLabel = Open Java
AlgorithmWizard.newMenuLabel = New
AlgorithmWizard.saveJavaMenuLabel = Save Java
AlgorithmWizard.saveJavaAsMenuLabel = Save Java As
AlgorithmWizard.compileMenuLabel = Compile
AlgorithmWizard.compileJarMenuLabel = Compile & Jar
AlgorithmWizard.xmlMenuLabel = XML
AlgorithmWizard.saveAlgoXMLMenuLabel = Save Algorithm XML
AlgorithmWizard.overlayAlgoXMLMenuLabel = Overlay Algorithm XML

AlgorithmWizard.frameTitle = Algorithm Wizard
AlgorithmWizard.algorithmName = Algorithm Name:
AlgorithmWizard.javaClassName = Java Class Name:
AlgorithmWizard.algorithmType = Algorithm Type:
AlgorithmWizard.javaPackage = Java Package:

AlgorithmWizard.algorithmNameTT = Name for this algorithm in the database.
AlgorithmWizard.javaClassNameTT = Name of class in Java source file.
AlgorithmWizard.javaPackageTT = Java package to which this class belongs.
AlgorithmWizard.menuOpenTT = Open an algorithm's Java source file for editing.
AlgorithmWizard.menuNewTT = Create a new algorithm Java source file.
AlgorithmWizard.menuSaveTT = Save the algorithm's Java source file.
AlgorithmWizard.menuSaveAsTT = Save the algorithm's Java source to specified file.
AlgorithmWizard.menuCompileJarTT = Bring up dialog to compile code & save in a JAR.
AlgorithmWizard.menuSaveXMLTT = Save algorithm's meta-data for subsequent import into database.
AlgorithmWizard.menuLoadXMLTT = Load meta-data & overlay over existing values.

AlgorithmWizard.extend = Extends:
AlgorithmWizard.implement = Implements:
AlgorithmWizard.commentsLabel = Comments
AlgorithmWizard.commentsTT = Type javadoc comments to appear in the class header
AlgorithmWizard.inputTimeSeries = Input Time Series
AlgorithmWizard.outputTimeSeries = Output Time Series
AlgorithmWizard.properties = Properties
AlgorithmWizard.aggreatePeriodVar = Aggregate Period Var:
AlgorithmWizard.codeSegments = Code Segments
AlgorithmWizard.editInputTSTableErr = Select input in table, then press Edit.
AlgorithmWizard.editOutputTSTableErr = Select output param, then press Edit.
AlgorithmWizard.editPropertyTableErr = Select property in table, then press Edit.
AlgorithmWizard.deleteInputTSTableErr = Select input in table, then press Delete.
AlgorithmWizard.deleteOutputTSTableErr = Select output param, then press Delete.
AlgorithmWizard.deletePropertyTableErr = Select property in table, then press Delete.
AlgorithmWizard.newOutputTSName = New Output Time Series Name:
AlgorithmWizard.outputParamNameErr = Output Param Name: \ 
AlgorithmWizard.outputParamExistsErr = An output param with that name already exists. \ 
AlgorithmWizard.inputParamExistsErr = An input param with that name exists. All params & properties must have unique names. \ 
AlgorithmWizard.propertyNameExistsErr = A property with that name exists. All params & properties must have unique names. \ 
AlgorithmWizard.cannotAddLabel = Cannot add
AlgorithmWizard.cannotChangeLabel = Cannot change
AlgorithmWizard.errorSavingAlgoMsg = Error saving algorithm: \ 
AlgorithmWizard.cannotFindTemplateJarErr = Can't find %s within the jar file. So can't read or write files
AlgorithmWizard.problemsParsingErr = Problems parsing '%s':\n
AlgorithmWizard.cannotOpenFileErr = Cannot open '%s': \ 
AlgorithmWizard.cannotSaveToErrMsg = Cannot save to '%s': \ 
AlgorithmWizard.compAlgoRecMissingErrMsg = The file '%s' does not contain a computation algorithm record.
AlgorithmWizard.cannotLoadFromErr = Cannot load from '%s': \ 
AlgorithmWizard.notBlankErr = may not be blank
AlgorithmWizard.validateNameErr = Role name must be a single word. It must start with a letter and must contain only alphanumeric characters or underscore.
AlgorithmWizard.imports = Imports
AlgorithmWizard.classVarsMethods = Class Vars & Methods
AlgorithmWizard.oneTimeInit = One Time Init
AlgorithmWizard.beforeIterating = Before Iterating
AlgorithmWizard.timeSlice = Time Slice
AlgorithmWizard.afterIterating = After Iterating

AlgorithmWizard.importsTT = 'import' declarations to add at the top of the Java file.
AlgorithmWizard.classVarsMethodsTT = Class variables & methods
AlgorithmWizard.oneTimeInitTT = This code executed once after algorithm object is created.
AlgorithmWizard.beforeIteratingTT = This code executed before each group of time slices.
AlgorithmWizard.timeSliceTT = This code executed at each time slice of the input data.
AlgorithmWizard.afterIteratingTT = This code executed after each group of time slices.

InputTimeSeriesTableModel.roleNameColumn = Role Name
InputTimeSeriesTableModel.javaTypeColumn = Java Type
InputTimeSeriesTableModel.parmInTypeCodeColumn = Parm Input Type Code

AlgoPropTableModel.propNameColumn = Prop Name
AlgoPropTableModel.javaTypeColumn = Java Type
AlgoPropTableModel.defaultColumn = Default

InputTimeSeriesDialog.title = Input Time Series
InputTimeSeriesDialog.roleName = Role Name:
InputTimeSeriesDialog.javaType = Java Type:
InputTimeSeriesDialog.roleTypeCode = Role Type Code:
InputTimeSeriesDialog.javaTypeComboTT = Select the data type for the Java source code.
InputTimeSeriesDialog.roleTypeComboTT = Select type-code for XML algorithm record.
InputTimeSeriesDialog.invalidInputNameErr = Invalid input param name: \ 
InputTimeSeriesDialog.inputNameExistsErr = There is already an input param with the name '%s'. All parameter names must be unique.
InputTimeSeriesDialog.outputNameExistsErr = An output with the name '%s' exists. All param & property names must be unique.
InputTimeSeriesDialog.propertyNameExistsErr = A property with the name '%s' exists. Parameter names must not clash with properties.					

PropDialog.title = Algorithm Property
PropDialog.propertyName = Property Name:
PropDialog.javaType = Java Type:
PropDialog.defaultValue = Default Value:
PropDialog.javaTypeComboTT = Select the data type for the Java source code.
PropDialog.defaultValueTT = Default value used if none defined in database.
PropDialog.invalidPropertyName = Invalid property name: \ 
PropDialog.propNameExistsErr = An input with the name '%s' already exists. Property name must not clash with input
PropDialog.defaultValueErr = You must provide a default value to be used in the absence of a database-definition.
PropDialog.defaultIntegerErr = The default value '%s' is not a valid long integer.
PropDialog.defaultDoubleErr = The default value '%s' is not a valid double-precision floating-point number.

CompileDialog.title = Compile Computation Algorithm
CompileDialog.compilerOptions = Compiler Options:
CompileDialog.classPath = Class Path:
CompileDialog.clear = Clear
CompileDialog.writeJavaCode = Write Java Code
CompileDialog.compile = Compile
CompileDialog.addToJarFile = Add to JAR File
CompileDialog.saveClassFile = Save Class File
CompileDialog.done = Done
CompileDialog.javaCode = \ Java Code \ 
CompileDialog.compileResults = \ Compile Results
CompileDialog.saveToTempFileMsg = Saving to temporary file '%s' 
CompileDialog.cannotWriteJavaFileErr = Cannot write java file: \ 
CompileDialog.cannotReadJavaFileErr = Cannot read in Java file: \ 
CompileDialog.savedJavaFileInfo = Successfully saved Java source file.\n
CompileDialog.pressingCompileInfo = You may proceed by pressing Compile.\n
CompileDialog.cannotFindCompilerErr = \nCannot find the compiler in your classpath. \nPlease find 'tools.jar' under your JDK installation and add it to your CLASSPATH variable before executing the algorithm editor.
CompileDialog.cannotLoadCompilerErr = \nCannot load the compiler in your classpath. \nPlease find 'tools.jar' under your JDK installation \nand add it to your CLASSPATH variable before \nexecuting the algorithm editor.
CompileDialog.javacFailedErr = JAVAC failed with exit code \ 
CompileDialog.failedToCompileErr = Failed to compile: \ 
CompileDialog.compileLogLabel = Compile Log: \ 
CompileDialog.cannotReadLogFileErr = Cannot read log file: \ 
CompileDialog.compileSuccessfulInfo = Compile was successful.\n
CompileDialog.saveResultingClassInfo = You may save resulting class file or add it to a JAR.\n
CompileDialog.compileFailedErr = Compile failed. Correct the above errors and try again.
CompileDialog.cannotSaveErr = Cannot save to '%s': \ 
CompileDialog.noJarSelectedInfo = No JAR file selected.
CompileDialog.jarFailedErr = JAR failed
CompileDialog.jarSucceededInfo = JAR succeeded
CompileDialog.jarFailedExErr = JAR Failed: \ 
CompileDialog.jarLogInfo = JAR Log: \ 
CompileDialog.jarSuccessfulInfo = JAR was successful.\n

CheckNewAlgoDialog.loadSelected = Load Selected
CheckNewAlgoDialog.title = Available Algorithms