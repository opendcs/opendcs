plugins {
    id 'opendcs.java-conventions'
    id 'opendcs.deps-conventions'
    id 'opendcs.sonar-conventions'
}

def commonJacocoExcludes = [
  "**/easy_install/**",
  "**/python_packages",
  "**/certifi/**",
  "**/chardet/**",
  "**/urllib3/**",
  "**/requests/**",
  "**/idna/**",
  "**/pkg_resources/**"
]

dependencies {
    implementation project(":install")

    testCompileOnly project(":opendcs")

    //Includes all jar dependencies from the main OpenDCS build within the opendcs-tests compile
    testCompileOnly fileTree('../../install/build/install/opendcs/dep') {
        include '*.jar'
        builtBy ":install:installDist"
    }

    testImplementation project(":testing:fixtures")
    testImplementation enforcedPlatform(libs.junit.bom)
    testImplementation(libs.bundles.junit)
    testImplementation(libs.bundles.junit.platform)
    testImplementation(libs.commons.io)
    testImplementation(libs.apache.derby)
    testImplementation(libs.fasterxml.jackson.databind)
    testImplementation(libs.webcompere.system.stubs.jupiter)
    testRuntimeOnly(project(":opendcs-slf4j-provider"))
}




def testEngines = (project.findProperty("opendcs.test.engine")?: "OpenDCS-XML,OpenDCS-Postgres,OpenDCS-Oracle,CWMS-Oracle").split(",")

test {
    // The below registered test tasks do all the real work.
    exclude '**/*'
}

testEngines.each { engine ->
    def tmpdir = "${project.layout.buildDirectory.get()}/runs/${engine}/tmp"

    def task = tasks.register("test"+engine.replace("-",""), Test) { task ->
        dependsOn ":install:installDist"
        dependsOn ":opendcs:test"
        //outputs.upToDateWhen {false}
        useJUnitPlatform()


        enabled = gradle.startParameter.taskNames.contains(":testing:" + project.name + ":test") ||
                  gradle.startParameter.taskNames.contains(":testing:" + project.name + ":" +task.name)
        doFirst {
            project.mkdir(tmpdir)
        }
        def install = project(":install")
        def stageDir = install.layout.getBuildDirectory().dir("install/${install.distributions.main.distributionBaseName.get()}").get()
        def classPath = (project(':opendcs').jar.outputs.files
                    + project(":opendcs").configurations.runtimeClasspath).asPath
        inputs.property "opendcs.test.engine", engine

        systemProperties += project.properties.findAll {k, v -> k.startsWith("opendcs")}
        systemProperties += project.properties.findAll {k, v -> k.startsWith("testcontainer")}
        systemProperties += ["opendcs.test.engine": engine]

        jvmArgs += "-Djava.io.tmpdir=${tmpdir}"
        jvmArgs += "-Dbuild.dir=${project.layout.buildDirectory.get()}"
        jvmArgs += "-Dopendcs.test.classpath=${classPath}"
        jvmArgs += "-Dresource.dir=${projectDir}/src/test/resources" // TODO: make clearer
        jvmArgs += "-DDCSTOOL_HOME=${stageDir}"
        jvmArgs += "-Djava.util.logging.config.file=${projectDir}/src/test/test-config/logging.properties"

        reports {
            html {}
            junitXml {}
        }
        jacoco {
            excludes += commonJacocoExcludes
        }
    }
    test.dependsOn task

    def jtr = tasks.register("jacocoTestReport"+engine.replace("-",""), JacocoReport) {
        dependsOn task
        //additionalSourceDirs files(project(":opendcs").sourceSets.main.java.srcDirs)
        //additionalClassDirs files(project(":opendcs").sourceSets.main.output)
        sourceSets project(":opendcs").sourceSets.main
        reports {
            html {
                outputLocation = jacoco.reportsDirectory.dir("jacoco-${engine}-html")
            }
            xml {
                outputLocation = jacoco.reportsDirectory.file("jacoco-${engine}.xml")
            }

        }
      


        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: commonJacocoExcludes)
        }))

    }

    task.configure {
        finalizedBy jtr
    }
}
