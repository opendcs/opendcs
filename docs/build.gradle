plugins {
    id 'base'
}

def pythonExe = osWin ? "python.exe" : "python3"
def docsVenv = "$buildDir/sphinx"
def docsDir = projectDir
def venvPath = (osWin ? "${docsVenv}/Scipts" : "${docsVenv}/bin")



configurations {
    docs {
        canBeConsumed = true
        canBeResolved = false        
    }
}


task prepVenv(type: Exec) {
    executable pythonExe
    workingDir projectDir
    args += "-m"
    args += "venv"
    args += docsVenv
    outputs.dir(docsVenv)
           .withPropertyName('outputDir')
}

task installReqs(type: Exec) {
    dependsOn prepVenv

    executable "pip"
    workingDir projectDir
    args += "install"
    args += "-r"
    args += "${docsDir}/requirements.txt"
    environment "PATH", venvPath
    environment "VENV_PATH", venvPath
}


tasks.addRule("Pattern: buidDocs<ID>") { String taskName ->
    def builder = taskName.toLowerCase().replace("builddocs","")
    if (taskName.startsWith("buildDocs")) {
        def theArgs = osWin ? ["/c","make.bat",builder]
                         : [builder]
        def cmd = osWin ? "cmd" : "make"
        task(taskName, type: Exec) {
            dependsOn installReqs

            executable cmd
            workingDir projectDir
            args = theArgs
            environment "PATH": "${venvPath}:${System.getenv('PATH')}"

            inputs.files(fileTree('source'))
                  .withPropertyName('sourceFiles')
                  .withPathSensitivity(PathSensitivity.RELATIVE)
    
            outputs.dir("${buildDir}/${builder}")
                   .withPropertyName('outputDir')
        }
    }
}

task buildDocs {
    dependsOn 'buildDocsHtml' 
    // work on PDF later,'buildDocsLatexpdf'
}


artifacts {
    docs(file("${buildDir}/html")) {
        builtBy(buildDocs)
    }
}
