plugins {
    id 'base'
}

def pythonExe = osWin ? "python.exe" : "python3"
def docsVenv = "$buildDir/sphinx"
def docsDir = projectDir
def venvPath = (osWin ? "${docsVenv}/Scripts" : "${docsVenv}/bin")
def noDocs = project.findProperty("no.docs") ?: false
def havePython = checkPython(pythonExe)

def checkPython(pythonStr) {
    def result = exec {
        ignoreExitValue = true
        if (osWin) {
            executable "cmd"
            args += "/c"
            args += pythonStr
        } else {
            executable pythonStr
        }
        args += "-c"
        args += "import sys; print('checking for python'); sys.exit(0)"
    }
    return result.getExitValue() == 0
}

configurations {
    docs {
        canBeConsumed = true
        canBeResolved = false        
    }
}

task prepVenv(type: Exec) {
    executable pythonExe
    workingDir projectDir
    args += "-m"
    args += "venv"
    args += docsVenv
    outputs.dir(docsVenv)
           .withPropertyName('outputDir')
}

task installReqs(type: Exec) {
    dependsOn prepVenv
    def theArgs = osWin ? ["/c","pip"]
                        : []
    def cmd = osWin ? "cmd" : venvPath+"/pip"
    executable cmd
    workingDir projectDir
    args += theArgs
    args += "install"
    args += "-r"
    args += "${docsDir}/requirements.txt"
    environment "PATH": "${venvPath}:${System.getenv('PATH')}"
    environment "VENV_PATH", venvPath
}


tasks.addRule("Pattern: buildDocs<ID>") { String taskName ->
    def builder = taskName.toLowerCase().replace("builddocs","")
    if (taskName.startsWith("buildDocs")) {
        if (!noDocs && havePython) {
        def theArgs = osWin ? ["/c","make.bat",builder]
                         : [builder]
        def cmd = osWin ? "cmd" : "make"
            task(taskName, type: Exec) {
                dependsOn installReqs

                executable cmd
                workingDir projectDir
                args = theArgs
                environment "PATH": "${venvPath}:${System.getenv('PATH')}"

                inputs.files(fileTree('source'))
                    .withPropertyName('sourceFiles')
                    .withPathSensitivity(PathSensitivity.RELATIVE)
                outputs.dir("${buildDir}/${builder}")
                       .withPropertyName('outputDir')
            }
        } else {
            task(taskName) {
                // Register outputs so downstream usages still behave correctly.
                outputs.dir("${buildDir}/${builder}")
                       .withPropertyName('outputDir')
                doLast {
                    println('Doc Generation was skipped.')
                }
            }
        }
    }
}

task buildDocs {
    dependsOn 'buildDocsHtml' 
    // work on PDF later,'buildDocsLatexpdf'
    doFirst {
        if (!havePython) {
            logger.warn("Python was not found, the documentation will not be built.")
        }
    }
}

artifacts {
    docs(file("${buildDir}/html")) {
        builtBy(buildDocs)
    }
}
