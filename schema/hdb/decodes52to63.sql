--------------------------------------------------------------------------
-- This script updates DECODES tables from an USBR HDB 5.2 CCP Schema to 
-- OpenDCS 6.2 Schema.
--
-- Execute cp52to62.sql first because it grants privilges needed here!

-- IMPORTANT!! This script must be executed as schema owner of the 
-- DECODES tables (usually DECODES).
-- Also, execute in the same directory that contains defines.sql
-- Also, Make sure DECODES_OWNER is set correctly in defines.sql
--------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- This software was written by Cove Software, LLC ("COVE") under contract 
-- to the United States Government. 
-- No warranty is provided or implied other than specific contractual terms
-- between COVE and the U.S. Government
-- 
-- Copyright 2016 U.S. Government.
-----------------------------------------------------------------------------

set echo on
spool combined.log
    
whenever sqlerror continue
set define on
@@defines.sql

----------- snip
--undefine TBL_SPACE_SPEC;
--define TBL_SPACE_SPEC = 'tablespace HDB_DATA'
--
--undefine IDX_TBL_SPACE_SPEC;
--define IDX_TBL_SPACE_SPEC = 'tablespace HDB_IDX'
--
--undefine DECODES_OWNER;
--define DECODES_OWNER = 'DECODES'
----------- snip



ALTER TABLE ENUM ADD DESCRIPTION VARCHAR2(400);

ALTER TABLE DATATYPE ADD DISPLAY_NAME VARCHAR2(64);

CREATE TABLE SCHEDULE_ENTRY
(
    SCHEDULE_ENTRY_ID NUMBER(*,0) NOT NULL,
    -- Unique name for this schedule entry.
    NAME VARCHAR2(64) NOT NULL,
    LOADING_APPLICATION_ID NUMBER(*,0),
    ROUTINGSPEC_ID INTEGER NOT NULL,
    -- date/time for first execution.
    -- Null means start immediately.
    START_TIME date,
    -- Used to interpret interval adding to start time.
    TIMEZONE VARCHAR2(32),
    -- Any valid interval in this database.
    -- Null means execute one time only.
    RUN_INTERVAL VARCHAR2(64),
    -- true or false
    ENABLED VARCHAR2(5) NOT NULL,
    LAST_MODIFIED date NOT NULL,
    PRIMARY KEY (SCHEDULE_ENTRY_ID),
    CONSTRAINT SENAME_UNIQUE UNIQUE(NAME)
) &TBL_SPACE_SPEC;

-- Describes a schedule run.
CREATE TABLE SCHEDULE_ENTRY_STATUS
(
    SCHEDULE_ENTRY_STATUS_ID NUMBER(*,0) NOT NULL,
    SCHEDULE_ENTRY_ID NUMBER(*,0) NOT NULL,
    RUN_START_TIME date NOT NULL,
    -- Null means no messages yet received
    LAST_MESSAGE_TIME date,
    -- Null means still running.
    RUN_COMPLETE_TIME date,
    -- Hostname or IP Address of server where the routing spec was run.
    HOSTNAME VARCHAR2(64) NOT NULL,
    -- Brief string describing current status: "initializing", "running", "complete", "failed".
    RUN_STATUS VARCHAR2(24) NOT NULL,
    -- Number of messages successfully processed during the run.
    NUM_MESSAGES INT DEFAULT 0 NOT NULL,
    -- Number of decoding errors encountered.
    NUM_DECODE_ERRORS INT DEFAULT 0 NOT NULL,
    -- Number of distinct platforms seen
    NUM_PLATFORMS INT DEFAULT 0 NOT NULL,
    LAST_SOURCE VARCHAR2(32),
    LAST_CONSUMER VARCHAR2(32),
    -- Last time this entry was written to the database.
    LAST_MODIFIED date NOT NULL,
    PRIMARY KEY (SCHEDULE_ENTRY_STATUS_ID),
    CONSTRAINT sched_entry_start_unique UNIQUE (SCHEDULE_ENTRY_ID, RUN_START_TIME)
) &TBL_SPACE_SPEC;


ALTER TABLE SCHEDULE_ENTRY
    ADD CONSTRAINT SCHEDULE_ENTRY_FKLA
    FOREIGN KEY (LOADING_APPLICATION_ID)
    REFERENCES HDB_LOADING_APPLICATION (LOADING_APPLICATION_ID)
;


ALTER TABLE ROUTINGSPEC ADD CONSTRAINT ROUTINGSPEC_PK PRIMARY KEY (ID);
ALTER TABLE SCHEDULE_ENTRY
    ADD CONSTRAINT SCHEDULE_ENTRY_FKRS
    FOREIGN KEY (ROUTINGSPEC_ID)
    REFERENCES ROUTINGSPEC (ID)
;

ALTER TABLE SCHEDULE_ENTRY_STATUS
    ADD CONSTRAINT SCHEDULE_ENTRY_STATUS_FKSE
    FOREIGN KEY (SCHEDULE_ENTRY_ID)
    REFERENCES SCHEDULE_ENTRY (SCHEDULE_ENTRY_ID)
;

CREATE TABLE DACQ_EVENT
(
    -- Surrogate Key. Events are numbered from 0...MAX
    DACQ_EVENT_ID NUMBER(*,0) NOT NULL,
    SCHEDULE_ENTRY_STATUS_ID NUMBER(*,0),
    PLATFORM_ID NUMBER(*,0),
    EVENT_TIME date NOT NULL,
    -- INFO = 3, WARNING = 4, FAILURE = 5, FATAL = 6
    --
    EVENT_PRIORITY INT NOT NULL,
    -- Software subsystem that generated this event
    SUBSYSTEM VARCHAR2(24),
    -- If this is related to a message, this holds the message's local_recv_time.
    MSG_RECV_TIME DATE,
    EVENT_TEXT VARCHAR2(256) NOT NULL,
    PRIMARY KEY (DACQ_EVENT_ID)
) &TBL_SPACE_SPEC;

ALTER TABLE DACQ_EVENT
    ADD CONSTRAINT DACQ_EVENT_FKSE
    FOREIGN KEY (SCHEDULE_ENTRY_STATUS_ID)
    REFERENCES SCHEDULE_ENTRY_STATUS (SCHEDULE_ENTRY_STATUS_ID)
;
CREATE INDEX DQE_PLATFORM_ID_IDX ON DACQ_EVENT (PLATFORM_ID) &IDX_TBL_SPACE_SPEC;

CREATE TABLE PLATFORM_STATUS
(
    PLATFORM_ID NUMBER(*,0) NOT NULL,
    -- Time of last station contact, whether or not a message was successfully received.
    LAST_CONTACT_TIME date,
    -- Time stamp of last message received. This is the message time stamp parsed from the header.
    -- Null means no message ever received.
    LAST_MESSAGE_TIME date,
    -- Up to 8 failure codes describing data acquisition and decoding.
    LAST_FAILURE_CODES VARCHAR2(8),
    -- Null means no errors encountered ever.
    LAST_ERROR_TIME date,
    -- Points to status of last routing spec / schedule entry run.
    -- Null means that the schedule entry is too old and has been purged.
    LAST_SCHEDULE_ENTRY_STATUS_ID NUMBER(*,0),
    ANNOTATION VARCHAR2(400),
    PRIMARY KEY (PLATFORM_ID)
) &TBL_SPACE_SPEC;

ALTER TABLE PLATFORM_STATUS
    ADD CONSTRAINT PLATFORM_STATUS_FKSE
    FOREIGN KEY (LAST_SCHEDULE_ENTRY_STATUS_ID)
    REFERENCES SCHEDULE_ENTRY_STATUS (SCHEDULE_ENTRY_STATUS_ID)
;


ALTER TABLE NETWORKLISTENTRY ADD PLATFORM_NAME VARCHAR2(64);
ALTER TABLE NETWORKLISTENTRY ADD DESCRIPTION VARCHAR2(80);

ALTER TABLE TRANSPORTMEDIUM ADD LOGGERTYPE VARCHAR2(24);
ALTER TABLE TRANSPORTMEDIUM ADD BAUD INT;
ALTER TABLE TRANSPORTMEDIUM ADD STOPBITS INT;
ALTER TABLE TRANSPORTMEDIUM ADD PARITY VARCHAR2(1);
ALTER TABLE TRANSPORTMEDIUM ADD DATABITS INT;
ALTER TABLE TRANSPORTMEDIUM ADD DOLOGIN VARCHAR2(5);
ALTER TABLE TRANSPORTMEDIUM ADD USERNAME VARCHAR2(32);
ALTER TABLE TRANSPORTMEDIUM ADD PASSWORD VARCHAR2(32);


----------------------------------------------------------------

CREATE TABLE SERIAL_PORT_STATUS
(
    -- Combo of DigiHostName:PortNumber
    PORT_NAME VARCHAR2(48) NOT NULL,
    -- True when port is locked.
    IN_USE VARCHAR2(5) DEFAULT 'FALSE' NOT NULL,
    -- Name of routing spec (or other process) that last used (or is currently using) the port.
    -- Null means never been used.
    LAST_USED_BY_PROC VARCHAR2(64),
    -- Hostname or IP Address from which this port was last used (or is currently being used).
    -- Null means never been used.
    LAST_USED_BY_HOST VARCHAR2(64),
    -- Java msec Date/Time this port was last used.
    LAST_ACTIVITY_TIME DATE,
    -- Java msec Date/Time that a message was successfully received on this port.
    LAST_RECEIVE_TIME DATE,
    -- The Medium ID (e.g. logger name) from which a message was last received on this port.
    LAST_MEDIUM_ID VARCHAR2(64),
    -- Java msec Date/Time of the last time an error occurred on this port.
    LAST_ERROR_TIME DATE,
    -- Short string. Usually one of the following:
    -- idle, dialing, login, receiving, goodbye, error
    PORT_STATUS VARCHAR2(32),
    PRIMARY KEY (PORT_NAME)
) &TBL_SPACE_SPEC;

ALTER TABLE DATATYPE MODIFY(CODE VARCHAR2(65 BYTE));

ALTER TABLE DECODESDATABASEVERSION RENAME COLUMN VERSION TO VERSION_NUM;
ALTER TABLE DECODESDATABASEVERSION RENAME COLUMN options TO DB_OPTIONS;
ALTER TABLE EQUIPMENTPROPERTY RENAME COLUMN VALUE TO PROP_VALUE;

UPDATE NETWORKLIST SET TRANSPORTMEDIUMTYPE = 'goes' WHERE TRANSPORTMEDIUMTYPE IS NULL;
ALTER TABLE NETWORKLIST MODIFY(TRANSPORTMEDIUMTYPE  NOT NULL);
UPDATE NETWORKLIST SET SITENAMETYPEPREFERENCE = 'hdb' WHERE SITENAMETYPEPREFERENCE IS NULL;
ALTER TABLE NETWORKLIST MODIFY(SITENAMETYPEPREFERENCE  NOT NULL);

ALTER TABLE PRESENTATIONGROUP MODIFY(LASTMODIFYTIME NOT NULL);
UPDATE PRESENTATIONGROUP SET ISPRODUCTION = 'FALSE' WHERE ISPRODUCTION IS NULL;
ALTER TABLE PRESENTATIONGROUP MODIFY(ISPRODUCTION  NOT NULL);
ALTER TABLE PRESENTATIONGROUP MODIFY(ISPRODUCTION  DEFAULT 'FALSE');

UPDATE ROUTINGSPEC SET ENABLEEQUATIONS = 'FALSE' WHERE ENABLEEQUATIONS IS NULL;
ALTER TABLE ROUTINGSPEC MODIFY(ENABLEEQUATIONS  NOT NULL);

UPDATE ROUTINGSPEC SET USEPERFORMANCEMEASUREMENTS = 'FALSE' 
  WHERE USEPERFORMANCEMEASUREMENTS IS NULL;
ALTER TABLE ROUTINGSPEC MODIFY(USEPERFORMANCEMEASUREMENTS  NOT NULL);
UPDATE ROUTINGSPEC SET ISPRODUCTION = 'FALSE' WHERE ISPRODUCTION IS NULL;
ALTER TABLE ROUTINGSPEC MODIFY(ISPRODUCTION NOT NULL);

ALTER TABLE ROUTINGSPECPROPERTY RENAME COLUMN NAME TO PROP_NAME;
ALTER TABLE ROUTINGSPECPROPERTY RENAME COLUMN VALUE TO PROP_VALUE;

CREATE UNIQUE INDEX DS_GROUP_SEQ_UNIQUE ON DATASOURCEGROUPMEMBER
(GROUPID, SEQUENCENUM) &IDX_TBL_SPACE_SPEC;

CREATE UNIQUE INDEX NL_TRANSPORT_UNIQUE ON NETWORKLISTENTRY
(NETWORKLISTID, TRANSPORTID) &IDX_TBL_SPACE_SPEC;

UPDATE CONFIGSENSOR SET SENSORNAME = 'X' WHERE SENSORNAME IS NULL;
ALTER TABLE CONFIGSENSOR MODIFY(SENSORNAME  NOT NULL);
UPDATE CONFIGSENSOR SET RECORDINGMODE = 'U' WHERE RECORDINGMODE IS NULL;
ALTER TABLE CONFIGSENSOR MODIFY(RECORDINGMODE  NOT NULL);

ALTER TABLE CONFIGSENSORPROPERTY RENAME COLUMN NAME TO PROP_NAME;
ALTER TABLE CONFIGSENSORPROPERTY RENAME COLUMN VALUE TO PROP_VALUE;

ALTER TABLE DATAPRESENTATION ADD (MAX_VALUE  FLOAT(126));
ALTER TABLE DATAPRESENTATION ADD (MIN_VALUE  FLOAT(126));
CREATE UNIQUE INDEX PRES_DT_UNIQUE ON DATAPRESENTATION (GROUPID, DATATYPEID) &IDX_TBL_SPACE_SPEC;

ALTER TABLE DECODESSCRIPT RENAME COLUMN TYPE TO SCRIPT_TYPE;
UPDATE DECODESSCRIPT SET DATAORDER = 'A' WHERE DATAORDER IS NULL;
ALTER TABLE DECODESSCRIPT MODIFY(DATAORDER NOT NULL);
ALTER TABLE DECODESSCRIPT MODIFY(DATAORDER DEFAULT 'A');

UPDATE PLATFORM SET ISPRODUCTION = 'FALSE' WHERE ISPRODUCTION IS NULL;
ALTER TABLE PLATFORM MODIFY(ISPRODUCTION NOT NULL);

ALTER TABLE PLATFORMPROPERTY RENAME COLUMN NAME TO PROP_NAME;
ALTER TABLE PLATFORMPROPERTY RENAME COLUMN VALUE TO PROP_VALUE;

ALTER TABLE PLATFORMSENSORPROPERTY RENAME COLUMN NAME TO PROP_NAME;
ALTER TABLE PLATFORMSENSORPROPERTY RENAME COLUMN VALUE TO PROP_VALUE;

ALTER TABLE DATASOURCEGROUPMEMBER ADD PRIMARY KEY (GROUPID, MEMBERID);

ALTER TABLE DATASOURCEGROUPMEMBER ADD CONSTRAINT GROUP_SEQ_UNIQUE
  UNIQUE (GROUPID, SEQUENCENUM)
  USING INDEX &IDX_TBL_SPACE_SPEC;
  
ALTER TABLE ENUM
 ADD CONSTRAINT ENNAME_UNIQUE
  UNIQUE (NAME)
  USING INDEX &IDX_TBL_SPACE_SPEC;

ALTER TABLE ROUTINGSPECNETWORKLIST
 ADD PRIMARY KEY (ROUTINGSPECID, NETWORKLISTNAME);

ALTER TABLE ROUTINGSPECPROPERTY
 ADD PRIMARY KEY (ROUTINGSPECID, PROP_NAME);

ALTER TABLE CONFIGSENSOR
 ADD PRIMARY KEY (CONFIGID, SENSORNUMBER);

ALTER TABLE CONFIGSENSORPROPERTY
 ADD PRIMARY KEY (CONFIGID, SENSORNUMBER, PROP_NAME);

ALTER TABLE DATAPRESENTATION ADD CONSTRAINT PRES_DT_UNIQUE
  UNIQUE (GROUPID, DATATYPEID) USING INDEX &IDX_TBL_SPACE_SPEC;

-- MJM the following doesn't work because there are platforms with same site/desig
-- but with different expiration. Furthermore, Oracle doesn't allow a timestamp with
-- timezone to be part of a unique key, so I can't simply add EXPIRATION to the
-- column list.
--ALTER TABLE PLATFORM
-- ADD CONSTRAINT SITE_DESIGNATOR_UNIQUE
--  UNIQUE (SITEID, PLATFORMDESIGNATOR)
--  USING INDEX &IDX_TBL_SPACE_SPEC;
  
ALTER TABLE PLATFORMPROPERTY ADD PRIMARY KEY (PLATFORMID, PROP_NAME);
  
ALTER TABLE PLATFORMSENSOR ADD PRIMARY KEY (PLATFORMID, SENSORNUMBER);

ALTER TABLE PLATFORMSENSORPROPERTY ADD PRIMARY KEY (PLATFORMID, SENSORNUMBER, PROP_NAME);

ALTER TABLE TRANSPORTMEDIUM ADD PRIMARY KEY (PLATFORMID, MEDIUMTYPE);

ALTER TABLE PLATFORMSENSORPROPERTY
 ADD CONSTRAINT PLATFORMSENSORPROPERTY_FKPS
  FOREIGN KEY (PLATFORMID, SENSORNUMBER)
  REFERENCES PLATFORMSENSOR (PLATFORMID,SENSORNUMBER);
  
update unitconverter set A = 6894.74729 where lower(fromunitsabbr) = 'psi' and lower(tounitsabbr) = 'pa';

-----------------------------------------------------------------
-- two new sequences for the high volume ccp/decodes tables so they don't use CWMS_SEQ:
-----------------------------------------------------------------
CREATE SEQUENCE DACQ_EVENTIDSEQ MINVALUE 1 START WITH 1 MAXVALUE 2000000000 NOCACHE CYCLE;
CREATE SEQUENCE SCHEDULE_ENTRY_STATUSIDSEQ MINVALUE 1 START WITH 1 MAXVALUE 2000000000 NOCACHE CYCLE;
CREATE SEQUENCE SCHEDULE_ENTRYIDSEQ MINVALUE 1 START WITH 1 MAXVALUE 2000000000 NOCACHE CYCLE;

-----------------------------------------------------------------
-- permissions for the new stuff.
-----------------------------------------------------------------
GRANT SELECT,INSERT,UPDATE,DELETE ON SCHEDULE_ENTRY TO DECODES_ROLE, CALC_DEFINITION_ROLE;
GRANT SELECT,INSERT,UPDATE,DELETE ON SCHEDULE_ENTRY_STATUS TO DECODES_ROLE, CALC_DEFINITION_ROLE;
GRANT SELECT,INSERT,UPDATE,DELETE ON DACQ_EVENT TO DECODES_ROLE, CALC_DEFINITION_ROLE;
GRANT SELECT,INSERT,UPDATE,DELETE ON PLATFORM_STATUS TO DECODES_ROLE, CALC_DEFINITION_ROLE;

GRANT SELECT ON DACQ_EVENTIDSEQ TO DECODES_ROLE;
GRANT SELECT ON SCHEDULE_ENTRY_STATUSIDSEQ TO DECODES_ROLE;
GRANT SELECT ON SCHEDULE_ENTRYIDSEQ TO DECODES_ROLE;

-----------------------------------------------------------------
-- public synonyms for the new stuff
-----------------------------------------------------------------
CREATE PUBLIC SYNONYM DACQ_EVENT FOR &DECODES_OWNER..DACQ_EVENT;
CREATE PUBLIC SYNONYM SCHEDULE_ENTRY FOR &DECODES_OWNER..SCHEDULE_ENTRY;
CREATE PUBLIC SYNONYM SCHEDULE_ENTRY_STATUS FOR &DECODES_OWNER..SCHEDULE_ENTRY_STATUS;
CREATE PUBLIC SYNONYM PLATFORM_STATUS FOR &DECODES_OWNER..PLATFORM_STATUS;
CREATE PUBLIC SYNONYM SERIAL_PORT_STATUS FOR &DECODES_OWNER..SERIAL_PORT_STATUS;

CREATE PUBLIC SYNONYM DACQ_EVENTIDSEQ FOR &DECODES_OWNER..DACQ_EVENTIDSEQ;
CREATE PUBLIC SYNONYM SCHEDULE_ENTRY_STATUSIDSEQ FOR &DECODES_OWNER..SCHEDULE_ENTRY_STATUSIDSEQ;
CREATE PUBLIC SYNONYM SCHEDULE_ENTRYIDSEQ FOR &DECODES_OWNER..SCHEDULE_ENTRYIDSEQ;

-----------------------------------------------------------------
-- Finally, update the database version numbers in the database
-----------------------------------------------------------------
delete from DecodesDatabaseVersion;
insert into DecodesDatabaseVersion values(13, 'Updated to OpenDCS 6.2 RC06');
delete from tsdb_database_version;
insert into tsdb_database_version values(13, 'Updated to OpenDCS 6.2 RC06');

spool off
exit;
