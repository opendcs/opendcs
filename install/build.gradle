buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-izpack-plugin:3.2'
    }
}


plugins {
    id 'com.bmuschko.izpack' version '3.2'
    id 'java'
    id 'opendcs.java-conventions'
}

configurations {
    opendcs
    docs
}

dependencies {
    izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.5'
    opendcs project(":core")
    docs project(path: ":docs", configuration: 'docs')
}

task stage(type: Copy) {
    from 'src/main/install'
    into "$buildDir/assemble/izpack"
    ext.outDir = "${buildDir}/assemble/izpack"

    from 'src/main/izpack'

    from("$rootDir/schema") {
        into "schema"
    }
    from("$rootDir/python") {
        into "python"
    }

    from(configurations.opendcs) {
        into 'dep'
        exclude 'opendcs-*.jar'
        rename('^(Cobra-1.0.2.jar|LoboBrowser-1.0.0.jar)','zzz$1')
        // TODO: rename lobo and cobra to prefix with zzz.
        // TODO: after everything generally working, get rid of those two deps.
    }

    from(configurations.docs) {
        into 'doc'
    }

    doLast {
        project.mkdir("$buildDir/assemble/izpack/dep")
        project.mkdir("$buildDir/assemble/izpack/edit-db/config")
        project.mkdir("$buildDir/assemble/izpack/edit-db/routing")
        project.mkdir("$buildDir/assemble/izpack/edit-db/platform")
        project.mkdir("$buildDir/assemble/izpack/edit-db/netlist")
        project.mkdir("$buildDir/assemble/izpack/edit-db/equipment")
        project.mkdir("$buildDir/assemble/izpack/edit-db/site")
        project.mkdir("$buildDir/assemble/izpack/doc")
    }
}

izPackCreateInstaller.dependsOn stage

izpack {
    
    appProperties = ['version': version]
    outputFile = file("$buildDir/distributions/opendcs-install-${version}.jar")
}

build.finalizedBy izPackCreateInstaller


task runLauncher(type: Exec) {
    dependsOn stage

    if (osWin) {
        executable "cmd"
        args "/c", "launcher_start.bat", "-d3", "-l", "CON:"
    } else {
        executable 'launcher_start'
        args "-d3", "-l", "/dev/stdout"
    }
    environment "DCSTOOL_HOME": file(stage.outDir)
    environment "PATH": files(
                            file(stage.outDir+"/bin"),
                            file(System.getenv("JAVA_HOME")+"/bin")
                            )
                        .asPath

}