<?xml version="1.0"?>

<!--

This is the ANT build file for OpenDCS 6.7 RC02 and Later.
The intent is that this will eventually be replaced with a Maven pom.xml.

DO NOT BUILD IN THE SOURCE TREE. Rather follow these instructions:

1. #    Eventually we want to be able to build with gradle or at least use it
   #    to download dependency jar files needed by opendcs. To do that, something
   #    like the following will be done:
   #    cd $HOME/git/opendcs     (or wherever it is for you)
   #    ./gradlew opentsdb
   HOWEVER, in the mean time, dependencies are available in a file "opendcs-dep.tgz"
   which you can download from:
       http://www.covesw.com/download/build/opendcs-dep.tgz
   You will also need the IzPack installer files downloaded from:
       http://www.covesw.com/download/build/IzPack-4.3.3.tgz

2. Create a build directory for yourself somewhere outside the source tree.

3. Copy this build.xml file (if changes or needed) or just ln if it's ok as it.
   It needs to be in your build directory you created in step 2.

4. Unpack the IzPack-4.3.3.tgz file somewhere. Set the environment variable
   IZPACK_HOME pointing to this directory.

5. Unpack the opendcs-dep.tgz tarball in the build directory so that there is
   a subdirectory here called 'dep' containing the needed jars.

6. Edit the "Settable Directories" section below so that the ant build
can find your git source tree and your directory with the downloaded jars.
    project.dir - set this to the 'opendcs' git working directory
    izpack.dir - set this to the location of the IzPack download
    dcpmon.dir - if you are building DCP Monitor, set this to location of DCPMON
                 web app source.
    HydroJSON - if you are building HydroJSON, set this to the location of the
                HdroJSON web app source.

7. CD to your build directory and run ant here.

-->



<project name="OPENDCS Toolkit" default="jar" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<description>Open DCS</description>

	<property environment="env"/>

	<!-- Settable Directories -->
	<property name="home.dir" value="${env.HOME}"/>
	<property name="project.dir" value="${env.OPENDCS_REPO}"/>
	<property name="thirdpartyjar.dir" value="dep"/>
	<property name="workspace.dir" value="${home.dir}/Documents/workspace-2019"/>
	<property name="izpack.dir" value="${env.IZPACK_HOME}"/>
	<property name="dcpmon.dir" value="${workspace.dir}/dcpmon"/>
	<property name="hydrojson.dir" value="${workspace.dir}/HydroJSON"/>
	<property name="src.dir" value="${project.dir}/src/main/java"/>
	<property name="resources.dir" value="${project.dir}/src/main/resources"/>

	<!-- Directories -->
	<property name="ant.home" value="/usr/local/ant"/>
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="dist.jar" value="${build.lib}/opendcs.jar"/>
	<property name="cwmsDbAPI.dir" value="${project.dir}/cwmsDbAPI"/>
	<property name="thirdpartyextjar.dir" value="${thirdpartyjar.dir}/ext/"/>
	<property name="cwmsSystemJars.dir" value="${project.dir}/cwmsSystemJars"/>

	<loadfile property="RCNUM" srcFile="${project.dir}/rcnum.txt">
		<filterchain><striplinebreaks/></filterchain>
	</loadfile>
	<echo message="RCNUM=${RCNUM}"/>
	
	<path id="lib.path">
		<fileset dir="${izpack.dir}/lib" includes="*.jar"/>
	</path>
	<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask"
		classpathref="lib.path"/>

<!--
	<taskdef name="izpack" classpath="${izpack.dir}/lib/compiler.jar"
		classname="com.izforge.izpack.ant.IzPackTask"/>
-->

	<path id="project.class.path">
		<pathelement path="${build.classes}/"/>
		<fileset dir="${thirdpartyjar.dir}">
			<include name="Cobra.jar"/>
			<include name="LoboBrowser-1.0.0.jar"/>
			<include name="asm-3.3.jar"/>
			<include name="aspectjrt-1.8.10.jar"/>
			<include name="cglib-2.1_3.jar"/>
			<include name="commons-codec-1.10.jar"/>
			<include name="commons-collections-2.1.1.jar"/>
			<include name="commons-logging-1.1.1.jar"/>
			<include name="commons-net-3.3.jar"/>
			<include name="ganymed-ssh2-build210.jar"/>
			<include name="jama-1.0.2.jar"/>
			<include name="javassist-3.7.ga.jar"/>
			<include name="jaxb-api-2.3.0.jar"/>
			<include name="jcalendar-1.3.2.jar"/>
			<include name="jcommon-1.0.16.jar"/>
			<include name="jep-2.4.1.jar"/>
			<include name="jfreechart-1.0.13.jar"/>
			<include name="jsch-0.1.55.jar"/>
			<include name="json-20200518.jar"/>
			<include name="jta-spec-1.0.1.jar"/>
			<include name="junit-3.8.1.jar"/>
			<include name="jython-2.7.2.jar"/>
			<include name="log4j-1.2.13.jar"/>
			<include name="mailapi-1.6.2.jar"/>
			<include name="ognl-2.7.3.jar"/>
			<include name="ojdbc8-19.3.0.0.jar"/>
			<include name="ons-19.3.0.0.jar"/>
			<include name="oraclepki-19.3.0.0.jar"/>
			<include name="osdt_cert-19.3.0.0.jar"/>
			<include name="osdt_core-19.3.0.0.jar"/>
			<include name="passay-1.3.1.jar"/>
			<include name="poi-5.0.0.jar"/>
			<include name="postgresql-9.1-901-1.jdbc4.jar"/>
			<include name="simplefan-19.3.0.0.jar"/>
			<include name="spring-test-2.5.6.jar"/>
			<include name="xml-apis-1.0.b2.jar"/>
			<include name="xwork-core-2.1.6.jar"/>
			<include name="bmp5-java-sdk.jar"/>
		</fileset>
		<fileset dir="${cwmsSystemJars.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="prepare" depends="clean" description="Makes build environment.">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="clean" description="Removes all generated files.">
		<delete dir="${build.dir}"/>
		<delete dir="stage"/>
		<delete>
 			<fileset dir="." includes="opendcs-6-8-RC*-unix-install.tgz"/>
            <fileset dir="." includes="opendcs-src-6-8-*.tgz"/>
		</delete>
		<delete dir="combined-src"/>
	</target>

	<target name="compile" depends="prepare"
		description="Compiles all source code.">

		<!-- create build date -->
		<tstamp>
			<format property="buildDate" pattern="MMM dd, yyyy"/>
		</tstamp>

		<copy todir="${build.classes}/lrgs/nledit">
			<fileset dir="${src.dir}/lrgs/nledit">
				<include name="*.gif"/>
			</fileset>
		</copy>

		<delete file="${build.classes}/lrgs/gui/LrgsBuild.class"/>
        <copy file="${src.dir}/lrgs/gui/LrgsBuild.java"
              tofile="${build.classes}/lrgs/gui/LrgsBuild.java"
              overwrite="true">
            <filterset>
                <filter token="DATE" value="${buildDate}" />
                <filter token="RCNUM" value="${RCNUM}" />
            </filterset>
        </copy>
		<javac debug="true" destdir="${build.classes}"
			target="1.6" source="1.6"
			includeantruntime="true"
			includes="lrgs/gui/LrgsBuild.java">
			<src path="${build.classes}"/>
			<classpath refid="project.class.path"/>
		</javac>

		<javac debug="true" destdir="${build.classes}"
			target="1.6" source="1.6"
			includeantruntime="true"
			includes="decodes/**,ilex/**,lrgs/**,lritdcs/**,opendcs/**,covesw/**">
			<src path="${src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>


	</target>

	<target name="jar" depends="compile" description="Generates opendcs.jar.">

		<!-- copy the resource files to the build directory. -->
		<copy todir="${build.classes}/decodes/resources">
    		<fileset dir="${resources.dir}/decodes/resources"/>
		</copy>
		<copy todir="${build.classes}/ilex/resources">
    		<fileset dir="${resources.dir}/ilex/resources"/>
		</copy>

		<!-- AW_AlgorithmTemplate.java needed by Algorithm Editor. -->
		<copy todir="${build.classes}/decodes/tsdb/algo">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="AW_AlgorithmTemplate.java"/>
			</fileset>
		</copy>

		<jar jarfile="${dist.jar}" 
		     basedir="${build.classes}"
			 update="true"/>
	</target>

	<target name="all" depends="clean,jar"
		description="Cleans, compiles, and builds the distrubtion Jar file."/>

	<!-- Builds staging area for IzPack Installer -->
	<target name="stage" depends="jar">
		<mkdir dir="stage"/>
		<mkdir dir="stage/doc"/>
		<mkdir dir="stage/netlist"/>
		<touch file="stage/netlist/empty.nl"/>
		<mkdir dir="stage/icons"/>
		<mkdir dir="stage/bin"/>
		<mkdir dir="stage/dep"/>
		<mkdir dir="stage/dep/ext"/>
		<mkdir dir="stage/dep/Lib"/>
		<mkdir dir="stage/examples"/>
		<mkdir dir="stage/python"/>
		<mkdir dir="stage/poll"/>

		<!-- build the sample database -->
		<mkdir dir="stage/edit-db"/>
		<mkdir dir="stage/edit-db/config"/>
		<mkdir dir="stage/edit-db/datasource"/>
		<mkdir dir="stage/edit-db/datatype"/>
		<mkdir dir="stage/edit-db/enum"/>
		<mkdir dir="stage/edit-db/equipment"/>
		<mkdir dir="stage/edit-db/eu"/>
		<mkdir dir="stage/edit-db/netlist"/>
		<mkdir dir="stage/edit-db/platform"/>
		<mkdir dir="stage/edit-db/presentation"/>
		<mkdir dir="stage/edit-db/routing"/>
		<mkdir dir="stage/edit-db/site"/>
		<mkdir dir="stage/schema"/>
		<mkdir dir="stage/schema/cwms"/>
		<mkdir dir="stage/schema/hdb"/>
		<mkdir dir="stage/schema/opendcs-pg"/>
		<mkdir dir="stage/schema/opendcs-oracle"/>
		<mkdir dir="stage/schema/noaa"/>

		<copy todir="stage/edit-db">
			<fileset dir="${project.dir}/install/edit-db">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage/icons">
			<fileset dir="${project.dir}/install/icons"/>
		</copy>
		<tar destfile="stage/icons.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="icons/**">
			</tarfileset>
		</tar>

		<copy todir="stage/bin">			
			<fileset dir="${project.dir}/install/bin"/>
			<fileset dir="build/lib">
				<include name="opendcs.jar"/>
			</fileset>
		</copy>

		<copy todir="stage/dep">
			<mappedresources>
				<!-- tweak to load at end as LoboBrowser here is including it's own jooq libaries for some reason breaking CWMS use-->
				<fileset dir="${thirdpartyjar.dir}">
					<include name="LoboBrowser-1.0.0.jar"/>
				</fileset>
				<globmapper from="LoboBrowser-1.0.0.jar" to="zzzLoboBrowser-1.0.0.jar"/>
			</mappedresources>
			<fileset dir="${thirdpartyjar.dir}">
				<exclude name="LoboBrowser-1.0.0.jar"/>
			</fileset>
			<fileset dir="${cwmsSystemJars.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>

<!--
		<copy todir="stage/dep/ext">
			<fileset dir="${workspace.dir}/opendcs-cove/3rd_party/ext">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="stage/dep/Lib">
			<fileset dir="${workspace.dir}/opendcs-cove/3rd_party/Lib"/>
		</copy>
-->

		<copy todir="stage/imports/comp-standard">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install/imports/comp-standard">
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/comp-cwms">
			<fileset dir="${src.dir}/decodes/cwms/rating">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/cwms/validation">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="ExpressionParserAlgorithm.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/updates">
			<fileset dir="${project.dir}/install/imports/updates">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/izpack">
				<include name="opendcs-6-8.xml"/>
				<include name="*.txt"/>
				<include name="unixOpenDcsShortcutSpec.xml"/>
				<include name="winOpenDcsShortcutSpec.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install">
				<include name="decodes.properties"/>
				<include name="computations.conf"/>
				<include name="LddsConnections"/>
			</fileset>
		</copy>

		<copy todir="stage/doc">
			<fileset dir="${project.dir}/doc">
				<include name="*.pdf"/>
				<include name="algorithms.txt"/>
			</fileset>
		</copy>
		<tar destfile="stage/doc.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="doc/**">
			</tarfileset>
		</tar>


		<copy todir="stage/poll">
			<fileset dir="${project.dir}/install/poll">
				<include name="*.poll"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/install/lrgs">
				<include name="archive"/>
				<include name="users"/>
				<include name="users/lrgsadmin"/>
				<include name="ddsrecv.conf"/>
				<include name="drgsconf.xml"/>
				<include name="drivers"/>
				<include name="lrgs.conf"/>
				<include name="netlist"/>
				<include name=".lrgs.passwd"/>
				<include name="lrgs.service"/>
			</fileset>
		</copy>

		<copy todir="stage/schema/cwms">
			<fileset dir="${project.dir}/schema/cwms"/>
		</copy>

		<copy todir="stage/schema/hdb">
			<fileset dir="${project.dir}/schema/hdb"/>
		</copy>

		<copy todir="stage/schema/opendcs-pg">
			<fileset dir="${project.dir}/schema/opendcs-pg"/>
		</copy>

		<copy todir="stage/schema/opendcs-oracle">
			<fileset dir="${project.dir}/schema/opendcs-oracle"/>
		</copy>

		<copy todir="stage/schema/noaa">
			<fileset dir="${project.dir}/schema/noaa"/>
		</copy>

		<copy todir="stage/python">
			<fileset dir="${project.dir}/python"/>
		</copy>

		<mkdir dir="stage/cwmsDbAPI"/>

	</target>

	<!-- same as package, but remove libraries not needed by USACE or USBR -->
	<target name="nonfed" depends="stage">
		<delete dir="stage/dep/Lib"/>
		<delete file="stage/dep/jep-2.4.1.jar"/>
		<delete file="stage/dep/jython-2.7.2.jar"/>
		<delete file="stage/dep/xmlparserv2-12.1.0.2.jar"/>
		<delete file="stage/dep/Cobra.jar"/>
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<izpack input="${project.dir}/izpack/opendcs-nf-6-8.xml"
				output="stage/opendcs-nf-6-8-RC${RCNUM}.jar"
				installerType="standard"
				basedir="stage"
				izPackDir="${izpack.dir}">
		</izpack>
	</target>

	<!-- same as nonfed, but includes OpenTSDB and computation files -->
	<target name="opentsdb" depends="stage">
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<izpack input="${project.dir}/izpack/opendcs-6-8.xml"
				output="stage/opendcs-ot-6-8-RC${RCNUM}.jar"
				installerType="standard"
				basedir="stage"
				izPackDir="${izpack.dir}"/>
	</target>

	<!-- same as OpenTSDB, but HDB package is preselected, needed for headless install -->
	<target name="hdb" depends="stage">
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<izpack input="${project.dir}/izpack/opendcs-hdb-6-8.xml"
				output="stage/opendcs-hdb-6-8-RC${RCNUM}.jar"
				installerType="standard"
				basedir="stage"
				izPackDir="${izpack.dir}"/>
	</target>

	<target name="cwmstar" depends="stage">
		<delete file="stage/dep/ojdbc8.jar"/>
		<delete file="stage/dep/ojdbc6.jar"/>
		<delete dir="stage/dep/IzPack-4.3.3"/>
		<delete>
			<fileset dir="stage/bin" includes="*.bat"/>
			<fileset dir="stage" includes="unixOpenDcsShortcutSpec.xml,winOpenDcsShortcutSpec.xml"/>
			<fileset dir="stage" includes="dospath.txt,opendcs-6-8.xml,readme.txt,LddsConnections"/>
		</delete>
		<move file="stage/lrgs.conf" tofile="stage/lrgs.conf.sample"/>
		<move file="stage/ddsrecv.conf" tofile="stage/ddsrecv.conf.sample"/>
		<move file="stage/decodes.properties" tofile="stage/decodes.properties.sample"/>
		<move file="stage/drgsconf.xml" tofile="stage/drgsconf.xml.sample"/>
		<move file="stage/edit-db" tofile="stage/edit-db.init"/>
		<move file="stage/users" tofile="stage/users.init"/>
		<replace dir="stage/bin" token="%INSTALL_PATH" value="$DCSTOOL_HOME"/>
		<tar destfile="opendcs-cwms-6-8-RC${RCNUM}.tgz" compression="gzip">
			<tarfileset dir="stage">
				<exclude name="bin/*"/>
				<exclude name="schema/cwms/createDb.sh"/>
				<exclude name="schema/cwms/importDecodesTemplate.sh"/>
				<exclude name="schema/cwms/createDefinesSql.sh"/>
				<exclude name="schema/cwms/createTableSpaces.sh"/>
				<exclude name="doc.tar.gz"/>
				<exclude name="icons.tar.gz"/>
			</tarfileset>
			<tarfileset dir="stage/bin" filemode="755" prefix="bin"/>
			<tarfileset file="stage/schema/cwms/createDb.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/importDecodesTemplate.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createDefinesSql.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createTableSpaces.sh" filemode="755" prefix="schema/cwms"/>

		</tar>
	</target>

	<path id="dcpmon.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${dcpmon.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="hydrojson.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${hydrojson.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="dcpmon" depends="jar">
		
		<mkdir dir="stage/dcpmon-build"/>
		<mkdir dir="stage/dcpmon-build/war-distro"/>
		<copy todir="stage/dcpmon-build/war-distro">
			<fileset dir="${dcpmon.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-custom"/>
		<copy todir="stage/dcpmon-build/war-custom">
			<fileset dir="${dcpmon.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/dcpmon-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/dcpmon-build/war-distro/WEB-INF/classes"
			target="1.6" source="1.6">
			<src path="${dcpmon.dir}/src"/>
			<classpath refid="dcpmon.class.path"/>
		</javac>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/makeDcpmon.sh"/>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/README"/>
		<tar tarfile="stage/dcpmon-build-6-8-${RCNUM}.tgz" 
			basedir="stage"
			includes="dcpmon-build/**"
			compression="gzip"/>
	</target>

	<target name="hydrojson" depends="jar">
		
		<mkdir dir="stage/hydrojson-build"/>
		<mkdir dir="stage/hydrojson-build/war-distro"/>
		<copy todir="stage/hydrojson-build/war-distro">
			<fileset dir="${hydrojson.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-custom"/>
		<copy todir="stage/hydrojson-build/war-custom">
			<fileset dir="${hydrojson.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/hydrojson-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/hydrojson-build/war-distro/WEB-INF/classes"
			target="1.7" source="1.7">
			<src path="${hydrojson.dir}/src"/>
			<classpath refid="hydrojson.class.path"/>
		</javac>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/makehydrojson.sh"/>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/README"/>
		<tar tarfile="stage/hydrojson-build-6-8-${RCNUM}.tgz" 
			basedir="stage"
			includes="hydrojson-build/**"
			compression="gzip"/>
	</target>
</project>
