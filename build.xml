<?xml version="1.0"?>

<!--

This is the ANT build file for OpenDCS 6.7 RC02 and Later.

The primary task is the "jar" task. This will create the opendcs.jar that contains all of the sub-applciations.

The next task is "opentsdb". This will create the OpenDCS installer jar

The other tasks are less commonly used.

-->



<project name="OPENDCS Toolkit" default="jar" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:resolver="antlib:org.apache.maven.resolver.ant">
	<taskdef uri="antlib:org.apache.maven.resolver.ant" resource="org/apache/maven/resolver/ant/antlib.xml"
    classpath="lib/maven-resolver-ant-tasks-1.2.1-uber.jar" />
	<description>Open DCS</description>
	<!-- I recommend we just put the version here instead of messing with the RCNUM file, but not a huge deal.-->
	<property name="version.root" value="6.8"/>
	<resolver:pom id="pom" file="pom.xml" />
	<resolver:remoterepo id="hec-public" url="https://www.hec.usace.army.mil/nexus/repository/maven-public" type="default" releases="true" snapshots="true"/>
	
	<resolver:remoterepos id="resolver.repositories">
        <resolver:remoterepo refid="central" />
		<resolver:remoterepo refid="hec-public" />		
	</resolver:remoterepos>

	<property name="build.compiler" value="javac1.8"/>

	<property environment="env"/>

	<!-- Settable Directories -->
	<property name="home.dir" value="${env.HOME}"/>
	<property name="project.dir" value="./"/>
	<!--<property name="thirdpartyjar.dir" value="dep"/>-->
	<!--<property name="workspace.dir" value="${home.dir}/Documents/workspace-2019"/>-->
	
	<property name="dcpmon.dir" value="${workspace.dir}/dcpmon"/>
	<property name="hydrojson.dir" value="${workspace.dir}/HydroJSON"/>
	<property name="src.dir" value="${project.dir}/src/main/java"/>
	<property name="resources.dir" value="${project.dir}/src/main/resources"/>

	<!-- Directories -->
	<!--<property name="ant.home" value="/usr/local/ant"/>-->
	<property name="build.dir" value="${project.dir}/build"/>	
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="dist.jar" value="${build.lib}/opendcs.jar"/>
	<property name="izpack.dir" value="${build.dir}/izpack/IzPack-4.3.3"/>
	<!--<property name="cwmsDbAPI.dir" value="${project.dir}/cwmsDbAPI"/>
	<property name="thirdpartyextjar.dir" value="${thirdpartyjar.dir}/ext/"/>
	<property name="cwmsSystemJars.dir" value="${project.dir}/cwmsSystemJars"/>-->

	<loadfile property="RCNUM" srcFile="${project.dir}/rcnum.txt">
		<filterchain><striplinebreaks/></filterchain>
	</loadfile>
	<echo message="RCNUM=${RCNUM}"/>
	<!-- save a lot of typing during version number updates -->
	<loadresource property="version.filename">
		<string>${version.root}-${RCNUM}</string>
		<filterchain>
			<tokenfilter>
				<replacestring from="." to="-"/>
			</tokenfilter>
		</filterchain>
	</loadresource>	
	<property name="version" value="${version.root}.${RCNUM}"/>
	<echo message ="Using version ${version.filename} for files"/>
	<echo message =" and ${version} for everything else"/>
	
	<taskdef name="izpack" classpath="${project.dir}/lib/izpack-standalone-compiler-4.3.5.jar"
		classname="com.izforge.izpack.ant.IzPackTask"/>

	<target name="dependencies">
		<mkdir dir="${build.dir}/dep/ext"/>
		<get dest="build/dep/ext" verbose="true" ignoreerrors="false" skipexisting="true">
			<url url="https://github.com/lobobrowser/Cobra/releases/download/1.0.2/Cobra.jar"/>
		</get>				
		<resolver:resolve>
			<resolver:dependencies>
				<resolver:dependency coords="com.oracle.ojdbc:ojdbc8:19.3.0.0" />
				<resolver:dependency coords="postgresql:postgresql:9.1-901-1.jdbc4"/>
				<resolver:dependency coords="asm:asm:3.3"/>
				<resolver:dependency coords="cglib:cglib:2.1_3"/>
				<resolver:dependency coords="commons-collections:commons-collections:2.1.1"/>
				<resolver:dependency coords="commons-logging:commons-logging:1.0.4"/>
				<resolver:dependency coords="commons-net:commons-net:3.3"/>
				<resolver:dependency coords="dom4j:dom4j:1.6.1"/>
				<resolver:dependency coords="ch.ethz.ganymed:ganymed-ssh2:build210"/>
				<resolver:dependency coords="org.apache.poi:poi:5.0.0"/>
				<resolver:dependency coords="com.toedter:jcalendar:1.3.2"/>
				<resolver:dependency coords="jfree:jcommon:1.0.12"/>
				<resolver:dependency coords="jfree:jfreechart:1.0.13"/>
				<resolver:dependency coords="org.python:jython:2.7.2"/>
				<resolver:dependency coords="com.opensymphony:xwork-core:2.1.6"/>
				<resolver:dependency coords="org.lobobrowser:LoboBrowser:1.0.0"/>
				<resolver:dependency coords="org.scijava:jep:2.4.1">
					<resolver:exclusion coords="jama:jama"/>
				</resolver:dependency>				
				<resolver:dependency coords="gov.nist.math:jama:1.0.2"/>
				<resolver:dependency coords="io.dropwizard.metrics:metrics-core:4.1.0-rc2"/>
				<resolver:dependency coords="org.passay:passay:1.3.1"/>
				<resolver:dependency coords="com.sun.mail:mailapi:1.6.2"/>
				<resolver:dependency coords="com.jcraft:jsch:0.1.55"/>
				<resolver:dependency coords="org.aspectj:aspectjrt:1.8.10"/>
				<resolver:dependency coords="org.json:json:20200518"/>				
				

				<resolver:dependency coords="mil.army.usace.hec:cwms-db-aspects:5.2-20210330.143019-2"/>
				<resolver:dependency coords="mil.army.usace.hec:cwms-db-dao:5.2-20210330.143006-2"/>
				<resolver:dependency coords="mil.army.usace.hec:cwms-db-jdbc:5.2-20210330.143013-2"/>
				<resolver:dependency coords="mil.army.usace.hec:cwms-db-jooq-codegen:5.1">
					<resolver:exclusion coords="org.jooq.pro"/>
				</resolver:dependency>
				<resolver:dependency coords="org.jooq.pro:jooq:3.11.2">
					<resolver:exclusion coords="com.oracle:ojdbc8"/>
				</resolver:dependency>
				<resolver:dependency coords="mil.army.usace.hec:hec-core:6.0-20210329.165811-39"/>
				<resolver:dependency coords="mil.army.usace.hec:hec-data:6.0-20210329.165821-39"/>
				<resolver:dependency coords="mil.army.usace.hec:hec-lib:6.0-20210329.165828-39"/>
				<resolver:dependency coords="mil.army.usace.hec:hec-rma:6.0-20210329.165836-37"/>
			</resolver:dependencies>
			<path refid="cp.runtime" scopes="compile,runtime,test"/>
		</resolver:resolve>

		<resolver:resolve>
			<resolver:dependencies>
				<resolver:dependency coords="mil.army.usace.hec:cwms-db-jooq:5.2-20210330.143322-2">
					<resolver:exclusion coords="org.jooq.pro"/>
					<resolver:exclusion coords="mil.army.usace.hec"/>
				</resolver:dependency>
				<resolver:dependency coords="mil.army.usace.hec:cwms-db-jooq-aspect:5.2-20210330.143023-2">
					<resolver:exclusion coords="org.jooq.pro"/>
				</resolver:dependency>								
			</resolver:dependencies>
			<path refid="cp.cwmsDb" scopes="compile,runtime,test"/>
		</resolver:resolve>
		<!--
		<resolver:resolver>
			<resolver:dependencies>
				<resolver:dependency coords="org.codehause.izpack:izpack-standalone-compiler:4.3.5"/>
				<resolver:dependency coords="org.codehause.izpack:izpack-ant:5.1.3"/>
			</resolver:dependencies>
			<path refid="izpack.runtime" scope="compile,runtime"/>
		</resolver:resolver>-->
	</target>
	
	<path id="project.class.path">
		<pathelement path="${build.classes}/"/>
		<path refid="cp.runtime"/>
		<path refid="cp.cwmsDb"/>
		<fileset dir="${build.dir}/dep/ext">
			<include name="*.jar"/>
		</fileset>
	</path>
	


	<target name="prepare" description="Makes build environment.">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="clean" description="Removes all generated files.">
		<delete dir="${build.dir}"/>
		<delete dir="stage"/>
		<delete>
 			<fileset dir="." includes="opendcs-6-8-RC*-unix-install.tgz"/>
            <fileset dir="." includes="opendcs-src-6-8-*.tgz"/>
		</delete>
		<delete dir="combined-src"/>
	</target>

	<target name="compile" depends="prepare,dependencies"
		description="Compiles all source code.">

		<!-- create build date -->
		<tstamp>
			<format property="buildDate" pattern="MMM dd, yyyy"/>
		</tstamp>

		<copy todir="${build.classes}/lrgs/nledit">
			<fileset dir="${src.dir}/lrgs/nledit">
				<include name="*.gif"/>
			</fileset>
		</copy>

		<delete file="${build.classes}/lrgs/gui/LrgsBuild.class"/>
        <copy file="${src.dir}/lrgs/gui/LrgsBuild.java"
              tofile="${build.classes}/lrgs/gui/LrgsBuild.java"
              overwrite="true">
            <filterset>
                <filter token="DATE" value="${buildDate}" />
                <filter token="RCNUM" value="${RCNUM}" />
            </filterset>
        </copy>
		<!--
		<javac debug="true" destdir="${build.classes}"
			target="1.6" source="1.6"
			includeantruntime="true"
			includes="lrgs/gui/LrgsBuild.java">
			<src path="${build.classes}"/>
			<classpath refid="project.class.path"/>
		</javac>-->

		<javac fork="true" debug="true" destdir="${build.classes}"
			target="1.6" source="1.6"
			includeantruntime="true"
			includes="decodes/**,ilex/**,lrgs/**,lritdcs/**,opendcs/**,covesw/**"
			excludes="lrgs/gui/LrgsBuild.java">
			<src path="${src.dir}"/>
			<src path="${build.classes}"/>
			<classpath refid="project.class.path"/>
		</javac>


	</target>

	<target name="jar" depends="compile" description="Generates opendcs.jar.">

		<!-- copy the resource files to the build directory. -->
		<copy todir="${build.classes}/decodes/resources">
    		<fileset dir="${resources.dir}/decodes/resources"/>
		</copy>
		<copy todir="${build.classes}/ilex/resources">
    		<fileset dir="${resources.dir}/ilex/resources"/>
		</copy>

		<!-- AW_AlgorithmTemplate.java needed by Algorithm Editor. -->
		<copy todir="${build.classes}/decodes/tsdb/algo">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="AW_AlgorithmTemplate.java"/>
			</fileset>
		</copy>

		<jar jarfile="${dist.jar}" 
		     basedir="${build.classes}"
			 update="true"/>
	</target>

	<target name="all" depends="clean,jar"
		description="Cleans, compiles, and builds the distrubtion Jar file."/>

	<!-- Builds staging area for IzPack Installer -->
	<target name="stage" depends="jar">
		<mkdir dir="stage"/>
		<mkdir dir="stage/doc"/>
		<mkdir dir="stage/netlist"/>
		<touch file="stage/netlist/empty.nl"/>
		<mkdir dir="stage/icons"/>
		<mkdir dir="stage/bin"/>
		<mkdir dir="stage/dep"/>
		<mkdir dir="stage/dep/ext"/>
		<mkdir dir="stage/dep/Lib"/>
		<mkdir dir="stage/examples"/>
		<mkdir dir="stage/python"/>
		<mkdir dir="stage/poll"/>

		<!-- build the sample database -->
		<mkdir dir="stage/edit-db"/>
		<mkdir dir="stage/edit-db/config"/>
		<mkdir dir="stage/edit-db/datasource"/>
		<mkdir dir="stage/edit-db/datatype"/>
		<mkdir dir="stage/edit-db/enum"/>
		<mkdir dir="stage/edit-db/equipment"/>
		<mkdir dir="stage/edit-db/eu"/>
		<mkdir dir="stage/edit-db/netlist"/>
		<mkdir dir="stage/edit-db/platform"/>
		<mkdir dir="stage/edit-db/presentation"/>
		<mkdir dir="stage/edit-db/routing"/>
		<mkdir dir="stage/edit-db/site"/>
		<mkdir dir="stage/schema"/>
		<mkdir dir="stage/schema/cwms"/>
		<mkdir dir="stage/schema/hdb"/>
		<mkdir dir="stage/schema/opendcs-pg"/>
		<mkdir dir="stage/schema/opendcs-oracle"/>
		<mkdir dir="stage/cwmsDbAPI"/>

		<copy todir="stage/edit-db">
			<fileset dir="${project.dir}/install/edit-db">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage/icons">
			<fileset dir="${project.dir}/install/icons"/>
		</copy>
		<tar destfile="stage/icons.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="icons/**">
			</tarfileset>
		</tar>

		<copy todir="stage/bin">			
			<fileset dir="${project.dir}/install/bin"/>
			<fileset dir="build/lib">
				<include name="opendcs.jar"/>
			</fileset>
		</copy>

		<copy todir="stage/dep" flatten="false">
			<!--<mappedresources>
				
				<path refid="cp.runtime">
					<include name="LoboBrowser-1.0.0.jar"/>
				</path>
				
			</mappedresources>-->
			<!-- tweak to load at end as LoboBrowser here is including it's own jooq libaries for some reason breaking CWMS use-->
			<!--<globmapper from="LoboBrowser-1.0.0.jar" to="zzzLoboBrowser-1.0.0.jar"/>-->
			<compositemapper>
				<identitymapper/>
				<globmapper from="LoboBrowser-1.0.0.jar" to="zzzLoboBrowser-1.0.0.jar"/>
			</compositemapper>
			<path>
				<path refid="cp.runtime"/>
			</path>
		</copy>

		<copy todir="stage/cwmsDbAPI" flatten="false">
			<path refid="cp.cwmsDb"/>
		</copy>

		<copy todir="stage/imports/comp-standard">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install/imports/comp-standard">
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/comp-cwms">
			<fileset dir="${src.dir}/decodes/cwms/rating">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/cwms/validation">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="ExpressionParserAlgorithm.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/updates">
			<fileset dir="${project.dir}/install/imports/updates">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/izpack">
				<include name="opendcs-install.xml"/>
				<include name="*.txt"/>
				<include name="unixOpenDcsShortcutSpec.xml"/>
				<include name="winOpenDcsShortcutSpec.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install">
				<include name="decodes.properties"/>
				<include name="computations.conf"/>
				<include name="LddsConnections"/>
			</fileset>
		</copy>

		<copy todir="stage/doc">
			<fileset dir="${project.dir}/doc">
				<include name="*.pdf"/>
				<include name="algorithms.txt"/>
			</fileset>
		</copy>
		<tar destfile="stage/doc.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="doc/**">
			</tarfileset>
		</tar>


		<copy todir="stage/poll">
			<fileset dir="${project.dir}/install/poll">
				<include name="*.poll"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/install/lrgs">
				<include name="archive"/>
				<include name="users"/>
				<include name="users/lrgsadmin"/>
				<include name="ddsrecv.conf"/>
				<include name="drgsconf.xml"/>
				<include name="drivers"/>
				<include name="lrgs.conf"/>
				<include name="netlist"/>
				<include name=".lrgs.passwd"/>
				<include name="lrgs.service"/>
			</fileset>
		</copy>

		<copy todir="stage/schema/cwms">
			<fileset dir="${project.dir}/schema/cwms"/>
		</copy>

		<copy todir="stage/schema/hdb">
			<fileset dir="${project.dir}/schema/hdb"/>
		</copy>

		<copy todir="stage/schema/opendcs-pg">
			<fileset dir="${project.dir}/schema/opendcs-pg"/>
		</copy>

		<copy todir="stage/schema/opendcs-oracle">
			<fileset dir="${project.dir}/schema/opendcs-oracle"/>
		</copy>

		<copy todir="stage/python">
			<fileset dir="${project.dir}/python"/>
		</copy>

	</target>

	<!-- same as nonfed, but includes OpenTSDB and computation files -->
	<target name="opentsdb" depends="stage">
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<echo message="hdb.preselect -> ${hdb.preselect}"/>
		<izpack input="${project.dir}/izpack/opendcs-install.xml"
				output="stage/opendcs-ot-${version.filename}.jar"
				installerType="standard"
				basedir="stage"			
				izPackDir="${izpack.dir}">
			<property name="version" value="${version}"/>
			<property name="hdb.preselect" value="no"/>
		</izpack>

	</target>

	<!-- same as OpenTSDB, but HDB package is preselected, needed for headless install -->
	<target name="hdb">
		<!-- Invokes izpack to build installable package with defaults for HDB -->		
		<izpack input="${project.dir}/izpack/opendcs-install.xml"
				output="stage/opendcs-hdb-${version.filename}.jar"
				installerType="standard"
				basedir="stage"
				inheritAll="true"
				izPackDir="${izpack.dir}">
			<property name="version" value="${version}"/>
			<property name="hdb.preselect" value="yes"/>			
		</izpack>
	</target>

	<target name="cwmstar" depends="stage">
		<delete file="stage/dep/ojdbc8.jar"/>
		<delete file="stage/dep/ojdbc6.jar"/>
		<delete dir="stage/dep/IzPack-4.3.3"/>
		<delete>
			<fileset dir="stage/bin" includes="*.bat"/>
			<fileset dir="stage" includes="unixOpenDcsShortcutSpec.xml,winOpenDcsShortcutSpec.xml"/>
			<fileset dir="stage" includes="dospath.txt,opendcs-6-8.xml,readme.txt,LddsConnections"/>
		</delete>
		<move file="stage/lrgs.conf" tofile="stage/lrgs.conf.sample"/>
		<move file="stage/ddsrecv.conf" tofile="stage/ddsrecv.conf.sample"/>
		<move file="stage/decodes.properties" tofile="stage/decodes.properties.sample"/>
		<move file="stage/drgsconf.xml" tofile="stage/drgsconf.xml.sample"/>
		<move file="stage/edit-db" tofile="stage/edit-db.init"/>
		<move file="stage/users" tofile="stage/users.init"/>
		<replace dir="stage/bin" token="%INSTALL_PATH" value="$DCSTOOL_HOME"/>
		<tar destfile="opendcs-cwms-${version.filename}.tgz" compression="gzip">
			<tarfileset dir="stage">
				<exclude name="bin/*"/>
				<exclude name="schema/cwms/createDb.sh"/>
				<exclude name="schema/cwms/importDecodesTemplate.sh"/>
				<exclude name="schema/cwms/createDefinesSql.sh"/>
				<exclude name="schema/cwms/createTableSpaces.sh"/>
				<exclude name="doc.tar.gz"/>
				<exclude name="icons.tar.gz"/>
			</tarfileset>
			<tarfileset dir="stage/bin" filemode="755" prefix="bin"/>
			<tarfileset file="stage/schema/cwms/createDb.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/importDecodesTemplate.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createDefinesSql.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createTableSpaces.sh" filemode="755" prefix="schema/cwms"/>

		</tar>
	</target>

	<path id="dcpmon.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${dcpmon.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="hydrojson.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${hydrojson.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="dcpmon" depends="jar">
		
		<mkdir dir="stage/dcpmon-build"/>
		<mkdir dir="stage/dcpmon-build/war-distro"/>
		<copy todir="stage/dcpmon-build/war-distro">
			<fileset dir="${dcpmon.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-custom"/>
		<copy todir="stage/dcpmon-build/war-custom">
			<fileset dir="${dcpmon.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/dcpmon-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/dcpmon-build/war-distro/WEB-INF/classes"
			target="1.6" source="1.6">
			<src path="${dcpmon.dir}/src"/>
			<classpath refid="dcpmon.class.path"/>
		</javac>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/makeDcpmon.sh"/>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/README"/>
		<tar tarfile="stage/dcpmon-build-${version.filename}.tgz" 
			basedir="stage"
			includes="dcpmon-build/**"
			compression="gzip"/>
	</target>

	<target name="hydrojson" depends="jar">
		
		<mkdir dir="stage/hydrojson-build"/>
		<mkdir dir="stage/hydrojson-build/war-distro"/>
		<copy todir="stage/hydrojson-build/war-distro">
			<fileset dir="${hydrojson.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-custom"/>
		<copy todir="stage/hydrojson-build/war-custom">
			<fileset dir="${hydrojson.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/hydrojson-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/hydrojson-build/war-distro/WEB-INF/classes"
			target="1.7" source="1.7">
			<src path="${hydrojson.dir}/src"/>
			<classpath refid="hydrojson.class.path"/>
		</javac>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/makehydrojson.sh"/>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/README"/>
		<tar tarfile="stage/hydrojson-build-${version.filename}.tgz" 
			basedir="stage"
			includes="hydrojson-build/**"
			compression="gzip"/>
	</target>
</project>
